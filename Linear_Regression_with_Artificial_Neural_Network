# Linear Regression with Artificial Neural Network

## Predicting insurance medical costs

# Import the libraries
import pandas as pd
import numpy as np

raw_Data = pd.read_csv('insurance.csv')
raw_Data.head()

raw_Data.info()

raw_Data.columns

# Create label encoders for categorical features
from sklearn.preprocessing import LabelEncoder

cat_cols = ['sex', 'smoker', 'region']

for var in cat_cols:
    number = LabelEncoder()
    raw_Data[var] = number.fit_transform(raw_Data[var].astype('str'))

raw_Data.head()

# Create features and label
X = raw_Data.iloc[:,:-1]
y = raw_Data.iloc[:, -1]

# Scaling the features and label
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()

x_Scaled = scaler.fit_transform(X)


# Spliting the data
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(x_Scaled, y, test_size=0.20)

print('X_train:', len(X_train))
print('y_train:',len(y_train))
print('X_test:',len(X_test))
print('y_test:',len(y_test))

# Building the linreg model
from tensorflow.python.keras.models import Sequential
from tensorflow.python.keras.layers import Dense
from tensorflow.python.keras.wrappers.scikit_learn import KerasRegressor

model = Sequential()

# Input Layer
model.add(Dense(12, input_dim=6, activation='relu'))
# Hidden Layers
model.add(Dense(8, activation='relu'))
model.add(Dense(4, activation='relu'))
# Output Layer
model.add(Dense(1, activation='linear'))
model.summary()

# Compile
model.compile(loss='mse', optimizer='adam', metrics=['mse', 'mae', 'accuracy'])

# Fit the model
history = model.fit(X_train, y_train, epochs=300, batch_size=50, verbose=1, validation_split=0.2)

import matplotlib.pyplot as plt
#%matplotlib inline

print(history.history.keys())
# "Loss"
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'validation'], loc='upper left')
plt.show()

preds = model.predict(X_test)


predictions = pd.DataFrame(preds)
actual = pd.DataFrame(y_test)

predictions.head()

actual.head()